--->video 2{

	in index.html{

		css in head tag
			#renderCanvas{
				width: 100%    	    // fullscreen(no scrollbars)
				height: 100%
				touch-action: none  // no zooming
					}

		<body>
			<canvas id="renderCanvas"></canvas>
			<script src="(destination)"></script>
			<script>
				window.addEventListener('DOMContentLoaded', function(){
	BjsApp.init();
	}); //an event that is triggered when the dom content are fully loaded (meaning tha the canvas is actually there)
			</script>
		
		</body>
	}


	in .js file{
	
		/// <reference path="babylob.2.2.d.ts"/>  to have autocompletion
	
		var BjsApp =BjsApp || {};
		BjsApp.intit=function(){
	
		//getting canvas
		var canvas =document.getElementBy Id('rendercanvas');

		//create a babylonjs engine object
		var engine = new BABYLON.Engine(canvas, true(softening edges of figures));

		// creating a scene
		var scene = new BABYLON.Scene(engine);

					}
		}
}








--->video 3:{

		A camera gives eyes through the world you are creating
	
		var camera = new BABYLON.FreeCamera('FreeCamera', new BABYLON.Vector3(0 ,2 ,-15)//a 3d vector with its location in the world ,scene)			//type of camera for first person shooter


		there are different types of lights
		// light environment light is one type which comes from above(light that comes from the sky and is reflected on the ground)

		var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0) //the direction of light comming from above, scene)


		//creating a sphere
		var sphere = BABYLON.Mesh.CreateSphere('sphere1', 16 //number of segments,2 , scene);
		sphere.position.y=1;	//changing the position(this case individual axis)


		engine.runRenerLoop(function(){	//to show your scene on screen
		scene.render(); //showing something on the screen multiple times(rendering)
						})
	     }





--->Interactive Camera{

			camera.attachControl(canvas) //allows interaction with camera (movement)

			var ground = Babylon.Mesh.CreateGround('g1',50,50,2,scene);
			
			
		      }





--->Basic Shapes{
		
			var box = Babylon.Mesh.CreateBox('box',1,scene);
			box.posistion = new Babylon.vector3(x,y,z);


			var cylinder = Babylon.Mesh.CreateCylinder('cyl',size,upper dia, lower dia, segments(smoothness),scene);


			var lines = new Babylon.Mesh.CreateLines('lines', new Babylon.Vector3(x,y,z),new Babylon.Vector3(x,y,z)new Babylon.Vector3(x,y,z) ,scene); //set of line segments
		}




--->Scaling and Rotating{

			box.scaling.x=2
			box.scaling= new BABYLON.Vector3(x,y,z);

			box.rotation.x=45

			// listening to screen resize
			window.addEventListener('resize', function(){
			engine.resize();
			});
			}



--->Materials{
		// add color material
		var spherematerial =new BABYLON.StandardMaterial('spheremat',scene);
		spherematerial.diffuse= new BABYLON.Color3(r,b,g); //type of color which deals with what will be viewed when exposed to color
		sphere.material= spherematerial;

		//adding transparency
		spherematerial.alpha=0.5;

		// adding textures
		var grass= new BABYLON.StandardMaterial('grass',scene);
		grass.diffuseTexture= new BABYLON.Texture('path',scene);
		grass.diffuseTexture.uScale=10;
		grass.diffuseTexture.vScale=10;
		ground.material=grass;	
		// gimp app for textures.... free textures.... texturelib.com

		//light reflection
		grass.specularColor= new BABYLON.Color3(0,0,0); //no light reflection
		
		//intensity of light reflection
		spherematerial.specularPower=5 // the lower the value the higher the reflection

		// color when no lights(emission)
		var emissionMaterial = new BABYLON.StandardMaterial('emm',scene);
		emissionMaterial.emissiveColor= new BABYLON.Color(r,b,g);


		//ambient color
	     }



--->Starting Solar System{

		//camera
		var cam = new Babylon.ArchRotateCamera(name, beta(angle in the y-z plane), alpha(angle in the x-z plane) ,radius,target or center new (BABYLON.Vector.Zero()),scene);
		camera.attachControl(canvas);

						}



--->Adding Planet{
		
		//Hemisphericlight properties
		var light = new BABYLON.HemisphericLight('h1',new BABYLON.Vector3(0,1,0);
		light.intensity=0.5 	//change the intensity of the light
		light.groundColor = new BABYLON.Color3(0,0,1)		//property where you change light comming from the ground (property of Hemispheric light)

		//changing the background or scene light
		scene.clearColor= new BABYLON.Color3(0,0,0);
				}




--->Shining Star{

		//adding an emissive texture
		sunmaterial.emissiveTexure= new BABYLON.Texture('path', scene);

		
		//light that iluminates what is around it is point light
		var light = new BABYLON.PointLight('name', //position new Babylon.Vector3.Zero(), scene  );
				}





--->Adding a Skybox{

		//to add a skybox you need six images either different or the same
		//to create the skybox					
		var skybox = new BABYLON.Mesh.CreateBox('name',size , scene);
		var skymaterial = new BABYLON.StandardMaterial('name',scene);
		skymaterial.backFaceCulling= false  	//dont render what we cant see (meaning that we dont need to render the back faces of the box which w dont want to see)
		skybox.infinteDistance= true;			//giving the box infinte distance so that it can move with the camera
		skybox.material= skymaterial;

		//limiting the camera within a radius not to leave the cube
		camera.upperLimitRadius= so value you specify

		//adding the texture to your skybox
		skymaterial.reflectionTexture= new BABYLON.CubeTexture('name by simply writing the common name between the six pics', scene);
		skymaterial.reflectionTexture.coordinatesMode=  BABYLON.Texture.SKYBOX_MODE; 		//just telling that this a skybox mode
					}




--->Orbiting Planets{

		//object for the planet
		planet1.orbit {
				radius: planet1.position.x,
				speed:0.01
				angle:0
		}


		// a method for scene that allows you to animate anything (called multiple times per second)
		scene.beforeRender= function(){
				planet1.position.x= planet1.orbit.radius *Math.sin(planet1.orbit.angle);
				planet1.position.z= planet1.orbit.radius *Math.cos(planet1.orbit.angle);
				planet1.orbit.angle+= planet1.orbit.speed;  
										};
					}
